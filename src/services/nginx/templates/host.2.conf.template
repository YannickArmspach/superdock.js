server {

  listen 80;

  server_name ${NGINX_HOST_2};
  server_tokens off;

  location / {
    return 301 https://${NGINX_HOST_2}$request_uri;
  }

}

server {

  listen 443 ssl http2;

  server_name ${NGINX_HOST_2};

  ssl_certificate /etc/nginx/ssl/${NGINX_HOST_2}/cert.crt;
  ssl_certificate_key /etc/nginx/ssl/${NGINX_HOST_2}/cert.key;
  ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers         HIGH:!aNULL:!MD5;

  client_max_body_size 100M;

  location / {
    
    proxy_pass http://host.docker.internal:${NGINX_PORT_2};

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_hide_header X-Frame-Options;
    add_header X-Frame-Options "ALLOWALL-FROM *";
    add_header Content-Security-Policy "frame-ancestors *";

    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
    add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';
    
  }

  # location /_nuxt/ {
  #   proxy_pass http://host.docker.internal:${NGINX_PORT_DEV_2};
  #   proxy_http_version 1.1;
  #   proxy_set_header Upgrade $http_upgrade;
  #   proxy_set_header Connection "upgrade";
  # }

}